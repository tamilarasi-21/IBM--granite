# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19yR2pqyQUd30H_7CXZgGy_aiiiEx8QiC
"""

@router.post("/upload-pdf")

async def upload_pdf(file: UploadFile File (...)):

contents = await file.read()

with open("temp.pdf", "wb") as f:

f.write(contents)

doc = fitz.open("temp.pdf")

full_text = "".join([page.get_text() for page in doc])

doc.close()services >

ai_story_generator.py


#services/ai_story_generator.py

 def generate_user_story (requirement: str) -> str:


# Dummy version you can replace with Watsonx/OpenAI later

return f"As a user, I want to {requirement.lower()) so that I can achieve my goal."
# === AI Services ===

@router.post("/code-gen")

def code_generator (requirements: str = Form(...), language: str = Form("python")):

return generate_code (requirements, language)

@router.post("/test-gen")

def test_generator (code: str Form(...), language: str = Form("python")):

return generate_test(code, language)

@router.post("/fix-bugs")

def bug_fixer(buggy_code: str = Form(...)):

return fix_bugs (buggy_code)

@router.post("/summarize")

def summarize_code(code: str = Form(...)):

return summarize_documentation(code)
app > services > watsonx_service.py

import os

import requests

import logging

from dotenv import load_dotenv

from app.services.code_generator import generate_code_snippet


from app.services.doc_generator import generate_docstring


from app.services.bug_resolver import resolve_bugs


load_dotenv()

 # Watsonx API endpoint



WATSONX_API_URL = "https://eu-de.ml.cloud.ibm.com/ml/v1/text/generation?version=2023-05-29"

 # Enable basic logging


logging.basicConfig(level=logging.INFO)



# Function to retrieve a Bearer token from IBM IAM using the API key


def get_iam_token() -> str:


response = requests.post(



url="https://iam.cloud.ibm.com/identity/token",

headers=["Content-Type": "application/x-www-form-urlencoded"},



data={

"grant_type": "urn:ibm:params: oauth: grant-type: apikey",

"apikey": os.getenv("API_KEY"),

},



if response.status_code != 200:


logging.error("Failed to get IAM token: %s", response.text)
app > routes > chat_routes.py


#app/routes/chat_routes.py


from fastapi import APIRouter, Form, HTTPException

from app.langchain_module.conversation_handler import handle_conversation

router = APIRouter()

@router.post("/chat")



def chat_with_bot(message: str = Form(...)):


try:

response = handle_conversation (message)


return {"response": response}


except Exception as e:



print(f" [X ERROR] {e}")

raise HTTPException(status_code=500, detail="Failed to process message.")
app >

main.py

app.include_router(auth_routes.router, prefix="/auth", tags=["Login"])

# Login & Register

app.include_router(chat_routes.router, prefix="/chat", tags=["Chat"])

# Chat operations

app.include_router(ai_routes.router, prefix="/ai", tags=["WorkFlow Tasks"])

# Code/Doc generation


app.include_router (feedback_routes.router, prefix="/feedback", tags=["Feedback"])


# Health check or home



@app.get("/")



def root():


return {"message": "Welcome to SmartSDLC "}
# CORS configuration (adjust in production)

app.add_middleware(

CORSMiddleware,

allow_origins=["*"], #

Replace with frontend domain like ["http://localhost:3000"]

allow_credentials=True,

allow_methods=["*"],

allow_headers=["*"],
# Local imports

from app.core.config import settings

from app.db.init_db import init_db

from app.routes import chat_routes, ai_routes, auth_routes

feedback_routes

app FastAPI(

title="SmartSDLC

AI-Enhanced Software Development Lifecycle",

description="AI-powered microservice platform for accelerating SDLC using Watsonx, FastAPI, and GitHub in

version="1.0.0"
(

myenv) PS C:\Users\VAISALI GUPTA\OneDrive\Desktop\Trials\smart_sdlc> cd smart_sdlc_frontend

(myenv) PS C:\Users\VAISALI GUPTA\OneDrive\Desktop\Trials\smart_sdlc\smart_sdlc_frontend> streamlit r

un home.py

You can now view your Streamlit app in your browser.

Local URL:

http://localhost:8502

Network URL:

http://192.168.0.187:8502